import streamlit as st
import pandas as pd
import numpy as np
import joblib
from haversine import haversine
import warnings
warnings.filterwarnings('ignore')

st.set_page_config(
    page_title="–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Ü–µ–Ω –Ω–∞ –¥–æ–º–∞ –æ–∫—Ä—É–≥–∞ King",
    page_icon="üè†",
    layout="wide"
)


@st.cache_resource
def load_model():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏"""
    try:
        model = joblib.load('best_xgb.joblib')
        return model
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}")
        return None


def create_features(data):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω—ã –≤ Feature Engineering"""
    try:
        data['sqft_living_x_grade'] = data['sqft_living'] * data['grade']

        center = (47.6076, -122.3369)
        data['dist_to_center'] = data.apply(
            lambda row: haversine((row['lat'], row['long']), center),
            axis=1
        )

        data['waterfront_x_grade'] = data['waterfront'] * data['grade']

        data['house_age'] = 2024 - data['yr_built']

        def assign_region(lat, long):
            if lat > 47.6 and long > -122.3:
                return '0'  # –°–µ–≤–µ—Ä–æ-–≤–æ—Å—Ç–æ–∫
            elif lat <= 47.6 and long > -122.3:
                return '2'  # –Æ–≥–æ-–≤–æ—Å—Ç–æ–∫
            elif lat > 47.6 and long <= -122.3:
                return '3'  # –°–µ–≤–µ—Ä–æ-–∑–∞–ø–∞–¥
            else:
                return '1'  # –Æ–≥–æ-–∑–∞–ø–∞–¥

        data['region'] = data.apply(
            lambda row: assign_region(row['lat'], row['long']), axis=1)

        region_dummies = pd.get_dummies(
            data['region'], prefix='region', drop_first=True)
        data = pd.concat([data, region_dummies], axis=1)

        data['has_basement'] = np.where(data['sqft_basement'] > 0, 1, 0)

        return data
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {e}")
        return None


def predict_price(model, input_data):
    """–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Ü–µ–Ω—ã –¥–æ–º–∞"""
    try:
        df = pd.DataFrame([input_data])

        df_processed = create_features(df)

        if df_processed is None:
            return None

        if 'region' in df_processed.columns:
            df_processed = df_processed.drop('region', axis=1)

        expected_features = model.feature_names_in_

        for feature in expected_features:
            if feature not in df_processed.columns:
                df_processed[feature] = 0

        df_processed = df_processed[expected_features]

        prediction = model.predict(df_processed)[0]

        return prediction
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–∏: {e}")
        st.error(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {str(e)}")
        return None


def main():
    st.title("üè† –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Ü–µ–Ω –Ω–∞ –¥–æ–º–∞ –æ–∫—Ä—É–≥–∞ King")
    st.markdown("–í–≤–µ–¥–∏—Ç–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–æ–º–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Ü–µ–Ω—ã")

    model = load_model()
    if model is None:
        st.stop()

    st.sidebar.header("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–æ–º–∞")

    st.sidebar.subheader("üè° –û—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏")
    floors = st.sidebar.slider(
        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç—Ç–∞–∂–µ–π", min_value=1.0, max_value=3.5, value=1.0, step=0.5)

    st.sidebar.subheader("üìê –ü–ª–æ—â–∞–¥–∏")
    sqft_living = st.sidebar.slider(
        "–ñ–∏–ª–∞—è –ø–ª–æ—â–∞–¥—å (–∫–≤.—Ñ—Ç)", min_value=290, max_value=13540, value=2000)
    sqft_basement = st.sidebar.slider(
        "–ü–ª–æ—â–∞–¥—å –ø–æ–¥–≤–∞–ª–∞ (–∫–≤.—Ñ—Ç)", min_value=0, max_value=4820, value=0)

    st.sidebar.subheader("‚≠ê –ö–∞—á–µ—Å—Ç–≤–æ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ")
    waterfront = st.sidebar.checkbox("–î–æ–º –Ω–∞ –±–µ—Ä–µ–≥—É")
    view = st.sidebar.slider(
        "–û—Ü–µ–Ω–∫–∞ –≤–∏–¥–∞ (0-4)", min_value=0, max_value=4, value=0)
    condition = st.sidebar.slider(
        "–°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–º–∞ (1-5)", min_value=1, max_value=5, value=3)
    grade = st.sidebar.slider(
        "–ö–∞—á–µ—Å—Ç–≤–æ –∏ –¥–∏–∑–∞–π–Ω (1-13)", min_value=1, max_value=13, value=7)

    st.sidebar.subheader("üìÖ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏")
    yr_built = st.sidebar.slider(
        "–ì–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏", min_value=1900, max_value=2015, value=1980)

    st.sidebar.subheader("üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ")
    zipcode = st.sidebar.number_input(
        "–ü–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å", min_value=98001, max_value=98199, value=98103)
    lat = st.sidebar.slider("–®–∏—Ä–æ—Ç–∞", min_value=47.1559,
                            max_value=47.7776, value=47.5480, format="%.4f")
    long = st.sidebar.slider("–î–æ–ª–≥–æ—Ç–∞", min_value=-122.5190,
                             max_value=-121.3154, value=-122.3238, format="%.4f")

    st.sidebar.subheader("üèòÔ∏è –°–æ—Å–µ–¥–Ω–∏–µ –¥–æ–º–∞")
    sqft_living15 = st.sidebar.slider(
        "–°—Ä–µ–¥–Ω—è—è –∂–∏–ª–∞—è –ø–ª–æ—â–∞–¥—å 15 —Å–æ—Å–µ–¥–Ω–∏—Ö –¥–æ–º–æ–≤", min_value=399, max_value=6210, value=2000)

    col1, col2 = st.columns([2, 1])

    with col1:
        st.subheader("–í–≤–µ–¥–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")

        params_data = {
            "–ü–∞—Ä–∞–º–µ—Ç—Ä": [
                "–≠—Ç–∞–∂–∏", "–ñ–∏–ª–∞—è –ø–ª–æ—â–∞–¥—å",
                "–ü–ª–æ—â–∞–¥—å –ø–æ–¥–≤–∞–ª–∞", "–ù–∞ –±–µ—Ä–µ–≥—É", "–í–∏–¥", "–°–æ—Å—Ç–æ—è–Ω–∏–µ",
                "–ö–∞—á–µ—Å—Ç–≤–æ", "–ì–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏", "–ü–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å",
                "–®–∏—Ä–æ—Ç–∞", "–î–æ–ª–≥–æ—Ç–∞", "–ñ–∏–ª–∞—è –ø–ª–æ—â–∞–¥—å —Å–æ—Å–µ–¥–µ–π"
            ],
            "–ó–Ω–∞—á–µ–Ω–∏–µ": [
                str(floors), str(sqft_living),
                str(sqft_basement), "–î–∞" if waterfront else "–ù–µ—Ç", str(
                    view), str(condition),
                str(grade), str(yr_built), str(zipcode),
                f"{lat:.4f}", f"{long:.4f}", str(
                    sqft_living15)
            ]
        }

        params_df = pd.DataFrame(params_data)
        st.dataframe(params_df, use_container_width=True)

    with col2:
        st.subheader("–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ")

        if st.button("–ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å —Ü–µ–Ω—É", type="primary", use_container_width=True):
            input_data = {
                'sqft_living': sqft_living,
                'floors': floors,
                'waterfront': int(waterfront),
                'view': view,
                'condition': condition,
                'grade': grade,
                'sqft_basement': sqft_basement,
                'yr_built': yr_built,
                'zipcode': zipcode,
                'lat': lat,
                'long': long,
                'sqft_living15': sqft_living15
            }

            with st.spinner("–í—ã—á–∏—Å–ª—è—é –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ..."):
                predicted_price = predict_price(model, input_data)

            if predicted_price is not None:
                st.metric(
                    label="–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞",
                    value=f"${predicted_price:,.0f}",
                    delta=None
                )

                st.info(
                    f"–¶–µ–Ω–∞ –∑–∞ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π —Ñ—É—Ç: ${predicted_price/sqft_living:.0f}")
            else:
                st.error(
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")


if __name__ == "__main__":
    main()
